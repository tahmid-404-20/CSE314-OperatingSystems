diff --git a/Makefile b/Makefile
index 39a99d7..69c475d 100644
--- a/Makefile
+++ b/Makefile
@@ -128,10 +128,12 @@ UPROGS=\
 	$U/_rm\
 	$U/_sh\
 	$U/_stressfs\
+	$U/_testprocinfo\
 	$U/_usertests\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
@@ -153,7 +155,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..4ffeeea 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -106,6 +106,7 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+uint64          providePstatInfo(uint64);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
diff --git a/kernel/param.h b/kernel/param.h
index 6624bff..729c609 100644
--- a/kernel/param.h
+++ b/kernel/param.h
@@ -11,3 +11,7 @@
 #define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
 #define FSSIZE       2000  // size of file system in blocks
 #define MAXPATH      128   // maximum file path name
+#define TIME_LIMIT_1 1    // time limit for queue 1
+#define TIME_LIMIT_2 2    // time limit for queue 2
+#define BOOST_INTERVAL 64 // time interval for boosting
+#define DEFAULT_TICKET_COUNT 10 // default ticket count
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..8d9a2a1 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -5,11 +5,14 @@
 #include "spinlock.h"
 #include "proc.h"
 #include "defs.h"
+#include "pstat.h"
 
 struct cpu cpus[NCPU];
 
 struct proc proc[NPROC];
 
+struct pstat pstat;
+
 struct proc *initproc;
 
 int nextpid = 1;
@@ -146,6 +149,8 @@ found:
   p->context.ra = (uint64)forkret;
   p->context.sp = p->kstack + PGSIZE;
 
+  p->tickets_original = DEFAULT_TICKET_COUNT;
+
   return p;
 }
 
@@ -681,3 +686,27 @@ procdump(void)
     printf("\n");
   }
 }
+
+
+uint64 providePstatInfo(uint64 addr) {
+  struct proc *p = myproc();
+  
+  for(int i=0;i<NPROC;i++){
+    if(proc[i].state == UNUSED) {
+      pstat.inuse[i] = 0;
+      continue;
+    }
+
+    pstat.inuse[i] = 1;
+    pstat.pid[i] = proc[i].pid;
+    pstat.inQ[i] = proc[i].inQ;
+    pstat.tickets_original[i] = proc[i].tickets_original;
+    pstat.tickets_current[i] = proc[i].tickets_current;
+    pstat.time_slices[i] = proc[i].time_slices;
+  }
+
+
+  if(copyout(p->pagetable, addr, (char *)&pstat, sizeof(pstat)) < 0)
+      return -1;
+    return 0;
+}
\ No newline at end of file
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..2f4f14f 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,11 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  int inuse;
+  int inQ;
+  int tickets_original;
+  int tickets_current;
+  int time_slices;
+  int time_slices_current;
 };
diff --git a/kernel/pstat.h b/kernel/pstat.h
new file mode 100644
index 0000000..67101c6
--- /dev/null
+++ b/kernel/pstat.h
@@ -0,0 +1,14 @@
+#ifndef _PSTAT_H_
+#define _PSTAT_H_
+#include "param.h"
+
+struct pstat {
+  int pid[NPROC]; // the process ID of each process 
+  int inuse[NPROC]; // whether this slot of the process table is being used (1 or 0)
+  int inQ[NPROC]; // which queue the process is currently in 
+  int tickets_original[NPROC]; // the number of tickets each process originally had
+  int tickets_current[NPROC]; // the number of tickets each process currently has
+  int time_slices[NPROC]; // the number of time slices each process has been scheduled
+};
+
+#endif // _PSTAT_H_
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..ce52e87 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_settickets(void);
+extern uint64 sys_getpinfo(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +128,8 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_settickets] sys_settickets,
+[SYS_getpinfo] sys_getpinfo,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..7926b7f 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_settickets 22
+#define SYS_getpinfo 23
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..0ea4a0d 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,32 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+
+uint64
+sys_settickets(void)
+{
+  struct proc *p = myproc();
+  int num_tickets;
+
+  argint(0, &num_tickets);
+
+  if(num_tickets < 1) {
+    p->tickets_original = DEFAULT_TICKET_COUNT;  // need not be set explicitly?? - will handle later
+    return -1;
+  }
+
+  p->tickets_original = num_tickets;
+  return 0;
+}
+
+uint64
+sys_getpinfo(void)
+{
+  uint64 addr;
+
+  argaddr(0, &addr);
+
+  return providePstatInfo(addr);
+
+}
\ No newline at end of file
diff --git a/user/testprocinfo.c b/user/testprocinfo.c
new file mode 100644
index 0000000..d45db11
--- /dev/null
+++ b/user/testprocinfo.c
@@ -0,0 +1,27 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/pstat.h"
+
+
+int main() {
+
+    struct pstat pstat;
+
+    if(getpinfo(&pstat) < 0) {
+        printf("getpinfo failed\n");
+        exit(1);
+    }
+
+    for(int i=0;i<NPROC;i++) {
+        if(pstat.inuse[i]) {
+            printf("pid: %d ", pstat.pid[i]);
+            printf("inQ: %d ", pstat.inQ[i]);
+            printf("tickets_original: %d ", pstat.tickets_original[i]);
+            printf("tickets_current: %d ", pstat.tickets_current[i]);
+            printf("time_slices: %d\n", pstat.time_slices[i]);
+        }
+    }
+
+    return 0;
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..7f886f6 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,3 +1,4 @@
+#include "kernel/pstat.h"
 struct stat;
 
 // system calls
@@ -22,6 +23,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int settickets(int);
+int getpinfo(struct pstat*);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..d2435c1 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("settickets");
+entry("getpinfo");
