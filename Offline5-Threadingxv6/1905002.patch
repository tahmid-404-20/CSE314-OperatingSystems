diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..651fce7
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,7 @@
+{
+    "files.associations": {
+        "queue.h": "c",
+        "user.h": "c",
+        "semaphore.h": "c"
+    }
+}
\ No newline at end of file
diff --git a/Makefile b/Makefile
index 39a99d7..d16a195 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,9 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_threads\
+	$U/_thread-mem-test\
+	$U/_prodcon\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..ee7dff3 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -89,6 +89,7 @@ int             growproc(int);
 void            proc_mapstacks(pagetable_t);
 pagetable_t     proc_pagetable(struct proc *);
 void            proc_freepagetable(pagetable_t, uint64);
+void            thread_freepagetable(pagetable_t, uint64);
 int             kill(int);
 int             killed(struct proc*);
 void            setkilled(struct proc*);
@@ -106,6 +107,11 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             thread_create(uint64, uint64, uint64);
+int             thread_join(int);
+void            exit_thread(void);
+int             conv_wait(uint64);
+int             conv_broadcast(uint64);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -164,8 +170,11 @@ pagetable_t     uvmcreate(void);
 void            uvmfirst(pagetable_t, uchar *, uint);
 uint64          uvmalloc(pagetable_t, uint64, uint64, int);
 uint64          uvmdealloc(pagetable_t, uint64, uint64);
+uint64          uvmdealloc_thread(pagetable_t, uint64, uint64);
 int             uvmcopy(pagetable_t, pagetable_t, uint64);
+int             uvmmirror(pagetable_t, pagetable_t, uint64, uint64);
 void            uvmfree(pagetable_t, uint64);
+void            uvmfree_thread(pagetable_t, uint64);
 void            uvmunmap(pagetable_t, uint64, uint64, int);
 void            uvmclear(pagetable_t, uint64);
 pte_t *         walk(pagetable_t, uint64, int);
@@ -173,6 +182,7 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+uint64          convert_va_to_pa(pagetable_t, uint64);
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..d1ef56d 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -9,6 +9,7 @@
 struct cpu cpus[NCPU];
 
 struct proc proc[NPROC];
+struct mem mem[NPROC];
 
 struct proc *initproc;
 
@@ -56,6 +57,13 @@ procinit(void)
       p->state = UNUSED;
       p->kstack = KSTACK((int) (p - proc));
   }
+
+  struct mem* m;
+  for(m = mem; m < &mem[NPROC]; m++) {
+      initlock(&m->lock, "mem");
+      m->state = FREE;
+      m->ref_count = 0;
+  }
 }
 
 // Must be called with interrupts disabled,
@@ -110,10 +118,12 @@ static struct proc*
 allocproc(void)
 {
   struct proc *p;
+  struct mem* m;
 
   for(p = proc; p < &proc[NPROC]; p++) {
     acquire(&p->lock);
     if(p->state == UNUSED) {
+      m = &mem[p - proc];
       goto found;
     } else {
       release(&p->lock);
@@ -123,7 +133,15 @@ allocproc(void)
 
 found:
   p->pid = allocpid();
+
+  p->mem_id = p->pid; // default value for process, for thread p->mem_id = parent_p->mem_id set in thread_create()
+  p->is_thread = 0; // set in thread_create for threads
+
   p->state = USED;
+  
+  m->state = TAKEN;
+  m->ref_count = 1;
+  p->mem_ptr = m;
 
   // Allocate a trapframe page.
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
@@ -155,11 +173,23 @@ found:
 static void
 freeproc(struct proc *p)
 {
+  // p->mem_ptr->neme_lock is also held
   if(p->trapframe)
     kfree((void*)p->trapframe);
   p->trapframe = 0;
-  if(p->pagetable)
-    proc_freepagetable(p->pagetable, p->sz);
+  if(p->pagetable) {
+    acquire(&p->mem_ptr->lock);
+    p->mem_ptr->ref_count--;
+    if(!p->mem_ptr->ref_count) {
+      proc_freepagetable(p->pagetable, p->sz);
+      p->mem_ptr->state = FREE;      
+    } 
+    else { // just free the pagetables only, not physical memory
+      thread_freepagetable(p->pagetable, p->sz);
+    }
+    release(&p->mem_ptr->lock);
+  }
+
   p->pagetable = 0;
   p->sz = 0;
   p->pid = 0;
@@ -168,6 +198,8 @@ freeproc(struct proc *p)
   p->chan = 0;
   p->killed = 0;
   p->xstate = 0;
+  p->mem_ptr = 0;
+  p->mem_id = 0;
   p->state = UNUSED;
 }
 
@@ -215,6 +247,18 @@ proc_freepagetable(pagetable_t pagetable, uint64 sz)
   uvmfree(pagetable, sz);
 }
 
+// Free a thread's page table, and "don't" free the
+// physical memory it refers to.
+void
+thread_freepagetable(pagetable_t pagetable, uint64 sz)
+{
+  uvmunmap(pagetable, TRAMPOLINE, 1, 0);
+  uvmunmap(pagetable, TRAPFRAME, 1, 0);
+  uvmfree_thread(pagetable, sz);
+}
+
+
+
 // a user program that calls exec("/init")
 // assembled from ../user/initcode.S
 // od -t xC ../user/initcode
@@ -262,16 +306,77 @@ growproc(int n)
   uint64 sz;
   struct proc *p = myproc();
 
+  acquire(&p->mem_ptr->lock);
+
   sz = p->sz;
+  uint64 oldsz = sz;
+
   if(n > 0){
     if((sz = uvmalloc(p->pagetable, sz, sz + n, PTE_W)) == 0) {
+      release(&p->mem_ptr->lock);
       return -1;
     }
   } else if(n < 0){
     sz = uvmdealloc(p->pagetable, sz, sz + n);
   }
+
   p->sz = sz;
+
+  if(p->sz > oldsz) { // allocation 
+    // synchronize pagetables
+    for(int i=0; i< NPROC; i++) {
+      struct proc* pp = &proc[i];
+
+      if(pp == p) continue;
+
+      acquire(&pp->lock);
+      if(pp->mem_id == p->mem_id && p->pid != pp->pid) {
+        if(uvmmirror(p->pagetable, pp->pagetable, pp->sz, p->sz) < 0){
+          release(&pp->lock);
+          goto bad_alloc;
+          return -1;
+        }
+        pp->sz = p->sz;
+      }
+      
+      release(&pp->lock);
+    }
+  } else if(sz < oldsz) { // deallocation
+    // synchronize pagetables
+    for(int i=0; i< NPROC; i++) {
+      struct proc* pp = &proc[i];
+
+      if(pp == p) continue;
+
+      acquire(&pp->lock);
+      if(pp->mem_id == p->mem_id && p->pid != pp->pid) {
+        pp->sz = uvmdealloc_thread(pp->pagetable, pp->sz, p->sz);
+      }
+      release(&pp->lock);
+
+    }
+  }
+
+  release(&p->mem_ptr->lock);
   return 0;
+
+bad_alloc:
+  // error have been occured while allocating page table for synchronization, so deallocate all, including current process
+  p->sz = uvmdealloc(p->pagetable, p->sz, oldsz);   // p->sz > oldsz was satisfied
+
+  for(int i=0; i< NPROC; i++) {
+    struct proc* pp = &proc[i];
+
+    acquire(&pp->lock);
+    if(pp->mem_id == p->mem_id && p->pid != pp->pid) {
+      pp->sz = uvmdealloc_thread(pp->pagetable, pp->sz, p->sz);
+    }
+    release(&pp->lock);
+
+  }
+
+  release(&p->mem_ptr->lock);
+  return -1;
 }
 
 // Create a new process, copying the parent.
@@ -315,7 +420,95 @@ fork(void)
   release(&np->lock);
 
   acquire(&wait_lock);
-  np->parent = p;
+  // a thread never got a child process, the process is child of the main (simplicity)
+  if(p->is_thread) {
+    np->parent = p->parent;
+  } else {
+    np->parent = p;
+  }
+  release(&wait_lock);
+
+  acquire(&np->lock);
+  np->state = RUNNABLE;
+  release(&np->lock);
+
+  return pid;
+}
+
+// create a new thread in disguise of a process
+int
+thread_create(uint64 fcn, uint64 arg, uint64 stack) {
+  int i, pid;
+  struct proc *np;
+  struct proc *p = myproc();
+
+  // Allocate process.
+  if((np = allocproc()) == 0){
+    return -1;
+  }
+
+  // reseting p->mem_ptr (naile ocd hoy)
+  p->mem_ptr->state = FREE;
+
+  np->is_thread = 1;
+  // Mirror parents pagetable to child
+  if(uvmmirror(p->pagetable, np->pagetable, 0, p->sz) < 0){
+    // ekhane error hoile freeproc with p->mem_refcount = 1, p->sz = 0, so physical page is not being freed
+    // but page table structure is freed
+    np->sz = 0;
+    freeproc(np);
+    release(&np->lock);
+    return -1;
+  }
+  np->sz = p->sz;
+  
+  // setting up threads memory stuffs
+  np->mem_ptr = p->mem_ptr;
+
+  acquire(&np->mem_ptr->lock);
+  np->mem_ptr->ref_count++;
+  release(&np->mem_ptr->lock);
+
+  np->mem_id = p->mem_id;
+
+  // copy saved user registers.
+  *(np->trapframe) = *(p->trapframe);
+
+  // Cause fork to return 0 in the child.
+  np->trapframe->a0 = arg;
+  np->trapframe->epc = fcn;
+
+  // set stack pointer
+  uint64 sp = stack + PGSIZE;
+  sp -= sizeof(uint64);
+  sp -= sp % 16;
+
+  uint64 fake_ret = 0xffffffff;
+
+  if(copyout(np->pagetable, sp, (char *)(&fake_ret), sizeof(uint64)) < 0)
+    goto bad;
+
+  np->trapframe->sp = sp;
+
+  // increment reference counts on open file descriptors.
+  for(i = 0; i < NOFILE; i++)
+    if(p->ofile[i])
+      np->ofile[i] = filedup(p->ofile[i]);
+  np->cwd = idup(p->cwd);
+
+  safestrcpy(np->name, p->name, sizeof(p->name));
+
+  pid = np->pid;
+
+  release(&np->lock);
+
+  acquire(&wait_lock);
+  // a threads parent is never a thread, rather the main process (useful in exit())
+  if(p->is_thread) {
+    np->parent = p->parent;
+  } else {
+    np->parent = p;
+  }
   release(&wait_lock);
 
   acquire(&np->lock);
@@ -323,8 +516,15 @@ fork(void)
   release(&np->lock);
 
   return pid;
+
+bad:
+  if(np->pagetable) {
+    freeproc(np);
+  }
+  return -1;
 }
 
+
 // Pass p's abandoned children to init.
 // Caller must hold wait_lock.
 void
@@ -372,6 +572,20 @@ exit(int status)
 
   // Parent might be sleeping in wait().
   wakeup(p->parent);
+
+  struct proc* pp;
+  for(pp = proc; pp < &proc[NPROC]; pp++) {
+    if(pp->mem_ptr && pp->mem_id == p->mem_id && pp->pid != p->pid) {
+      acquire(&pp->lock);
+      // simply got the code from kill() function for O(n), if called kill(pp->pid) --> O(n^2)
+      pp->killed = 1;
+      if(pp->state == SLEEPING){
+        // Wake process from sleep().
+        pp->state = RUNNABLE;
+      }
+      release(&pp->lock);
+    }
+  } 
   
   acquire(&p->lock);
 
@@ -385,6 +599,53 @@ exit(int status)
   panic("zombie exit");
 }
 
+
+// Exit the current thread.
+void
+exit_thread(void)
+{
+  struct proc *p = myproc();
+
+  if(!p->is_thread) {
+    // as it is not quite wise to call thread_exit from a process, but our OS is graceful
+    exit(1);
+  } else {
+    if(p == initproc)
+    panic("init exiting");
+
+    // Close all open files.
+    for(int fd = 0; fd < NOFILE; fd++){
+      if(p->ofile[fd]){
+        struct file *f = p->ofile[fd];
+        fileclose(f);
+        p->ofile[fd] = 0;
+      }
+    }
+
+    begin_op();
+    iput(p->cwd);
+    end_op();
+    p->cwd = 0;
+
+    // acquire(&wait_lock);
+
+    // Give any children to init.
+    // reparent(p);
+
+    // another thread might be sleeping in join
+    acquire(&p->lock);
+    p->state = ZOMBIE;
+
+    wakeup(p);
+
+    // release(&wait_lock);
+
+    // Jump into the scheduler, never to return.
+    sched();
+    panic("zombie exit");
+  }
+}
+
 // Wait for a child process to exit and return its pid.
 // Return -1 if this process has no children.
 int
@@ -434,6 +695,92 @@ wait(uint64 addr)
   }
 }
 
+int
+conv_wait(uint64 cv_addr) {
+  struct proc *p = myproc();
+  acquire(&p->mem_ptr->lock);
+  int *paddr = (int *)convert_va_to_pa(p->pagetable, cv_addr);
+  
+  // if value is set 1 already(from another cpu), no need to sleep as it is already signaled (optimization)
+  if (__sync_bool_compare_and_swap(paddr, 0, 0)) {
+    sleep(paddr, &p->mem_ptr->lock);
+    release(&p->mem_ptr->lock);
+    return 0;
+  } 
+
+  release(&p->mem_ptr->lock);
+  return -1;
+}
+
+int
+conv_broadcast(uint64 cv_addr) {
+  struct proc *p = myproc();
+  acquire(&p->mem_ptr->lock);
+  int *paddr = (int *)convert_va_to_pa(p->pagetable, cv_addr);
+  
+  // check all threads that are waiting on cv and wake them up
+  for(struct proc *pp = proc; pp < &proc[NPROC]; pp++) {
+    acquire(&pp->lock);
+    if(pp->mem_id == p->mem_id && pp->state == SLEEPING && pp->chan == paddr) {
+      pp->state = RUNNABLE;
+    }
+    release(&pp->lock);
+  }
+
+  release(&p->mem_ptr->lock);
+  return 0;
+}
+
+
+// Wait for a child thread to exit and return its threadid.
+// Return -1 if this process has no child thread
+int
+thread_join(int threadid)
+{
+  struct proc *pp;
+  int found, pid;
+  struct proc *p = myproc();
+
+  // Scan through table looking for exited children.
+  found = 0;
+  pid = -1;
+  for(pp = proc; pp < &proc[NPROC]; pp++){
+    acquire(&pp->lock);
+    for(;;) {
+      if(pp->pid == threadid && pp->mem_id == p->mem_id && pp->killed == 0){
+        found = 1;
+
+        // No point in checking if I am dead
+        if(killed(p)){
+          release(&pp->lock);
+          return -1;
+        }
+        // make sure the child isn't still in exit() or swtch().
+        
+        if(pp->state == ZOMBIE){
+          // Found one.
+          pid = pp->pid;
+          freeproc(pp);
+          release(&pp->lock);
+          return pid;
+        }
+        // Wait for a child to exit.
+        sleep(pp, &pp->lock);      
+      } else if(found) {  // t2,t3 joined on t1, t2 freeproced t1, now t3 has come as if condition is false (pp->pid != threadid)
+        // i have woke up, but alas, someone else destroyed my long awaited one
+        release(&pp->lock);
+        return pid;
+      } else {
+        // not this index, let's go for next index
+        break;
+      }
+    }  
+    release(&pp->lock);
+  } 
+  return -1;   
+}
+
+
 // Per-CPU process scheduler.
 // Each CPU calls scheduler() after setting itself up.
 // Scheduler never returns.  It loops, doing:
@@ -681,3 +1028,4 @@ procdump(void)
     printf("\n");
   }
 }
+
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..07663e8 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -79,8 +79,17 @@ struct trapframe {
   /* 280 */ uint64 t6;
 };
 
+enum memstate { FREE, TAKEN };
+
+struct mem {
+  enum memstate state;
+  int ref_count;
+  struct spinlock lock;
+}; 
+
 enum procstate { UNUSED, USED, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };
 
+
 // Per-process state
 struct proc {
   struct spinlock lock;
@@ -104,4 +113,9 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  struct mem* mem_ptr;            // pointer to the memory struct, a process points itself, thread points to parent. (disjoint set style)
+  int is_thread;                  // if it is thread
+  int mem_id;                     // All threads will have the same physical pages with the mothrer, hence the same memory_id
+                                  // for a process, p->mem_id = p->pid
 };
diff --git a/kernel/spinlock.h b/kernel/spinlock.h
index 4392820..ecbe869 100644
--- a/kernel/spinlock.h
+++ b/kernel/spinlock.h
@@ -5,5 +5,4 @@ struct spinlock {
   // For debugging:
   char *name;        // Name of lock.
   struct cpu *cpu;   // The cpu holding the lock.
-};
-
+};
\ No newline at end of file
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..6131c7f 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,11 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_thread_create(void);
+extern uint64 sys_thread_join(void);
+extern uint64 sys_thread_exit(void);
+extern uint64 sys_conv_wait(void);
+extern uint64 sys_conv_broadcast(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +131,11 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_thread_create] sys_thread_create,
+[SYS_thread_join] sys_thread_join,
+[SYS_thread_exit] sys_thread_exit,
+[SYS_conv_wait] sys_conv_wait,
+[SYS_conv_broadcast] sys_conv_broadcast,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..2457d3b 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,8 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_thread_create 22
+#define SYS_thread_join 23
+#define SYS_thread_exit 24
+#define SYS_conv_wait 25
+#define SYS_conv_broadcast 26
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..3b85a9b 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,49 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_thread_create(void) {
+  uint64 fcn, arg, stack;
+  
+  argaddr(0, &fcn);
+  argaddr(1, &arg);
+  argaddr(2, &stack);
+
+  return thread_create(fcn, arg, stack);
+}
+
+uint64
+sys_thread_join(void) {
+  int thread_id;
+
+  argint(0, &thread_id);
+
+  return thread_join(thread_id);
+}
+
+uint64
+sys_thread_exit(void) {
+  
+  exit_thread();
+
+  return 0;
+}
+
+uint64
+sys_conv_wait(void) {
+  uint64 cv;
+  argaddr(0, &cv);
+  return conv_wait(cv);
+}
+
+uint64
+sys_conv_broadcast(void) {
+  uint64 cv;
+
+  argaddr(0, &cv);
+
+  conv_broadcast(cv);
+
+  return 0;
+}
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..b7b8e14 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -125,6 +125,13 @@ walkaddr(pagetable_t pagetable, uint64 va)
   return pa;
 }
 
+uint64
+convert_va_to_pa(pagetable_t p, uint64 va)
+{
+  uint64 pa = walkaddr(p, va) | (va & ((1L << 12) - 1));
+  return pa;
+}
+
 // add a mapping to the kernel page table.
 // only used when booting.
 // does not flush TLB or enable paging.
@@ -266,6 +273,21 @@ uvmdealloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz)
   return newsz;
 }
 
+
+uint64
+uvmdealloc_thread(pagetable_t pagetable, uint64 oldsz, uint64 newsz)
+{
+  if(newsz >= oldsz)
+    return oldsz;
+
+  if(PGROUNDUP(newsz) < PGROUNDUP(oldsz)){
+    int npages = (PGROUNDUP(oldsz) - PGROUNDUP(newsz)) / PGSIZE;
+    uvmunmap(pagetable, PGROUNDUP(newsz), npages, 0);  // do not free physical memory
+  }
+
+  return newsz;
+}
+
 // Recursively free page-table pages.
 // All leaf mappings must already have been removed.
 void
@@ -296,6 +318,16 @@ uvmfree(pagetable_t pagetable, uint64 sz)
   freewalk(pagetable);
 }
 
+// Unmap child's physical memory pages, do not free them.
+// then free page-table pages.
+void
+uvmfree_thread(pagetable_t pagetable, uint64 sz)
+{
+  if(sz > 0)
+    uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 0);  // do_free = 0
+  freewalk(pagetable);
+}
+
 // Given a parent process's page table, copy
 // its memory into a child's page table.
 // Copies both the page table and the
@@ -332,6 +364,39 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   return -1;
 }
 
+
+// Given a parent process's page table, copy
+// it's page table entries into a child's page table.
+int
+uvmmirror(pagetable_t old, pagetable_t new, uint64 start, uint64 sz)
+{
+  pte_t *pte;
+  uint64 pa, i;
+  uint flags;
+
+  start = PGROUNDUP(start);
+
+  for(i = start; i < sz; i += PGSIZE){
+    if((pte = walk(old, i, 0)) == 0)
+      panic("uvmcopy: pte should exist");
+    if((*pte & PTE_V) == 0)
+      panic("uvmcopy: page not present");
+    pa = PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte);
+  
+    if(mappages(new, i, PGSIZE, (uint64)pa, flags) != 0){
+      goto err;
+    }
+  }
+  return 0;
+
+ err:
+  uvmunmap(new, 0, i / PGSIZE, 0);  // do_free = 0 as it is a thread
+  return -1;
+}
+
+
+
 // mark a PTE invalid for user access.
 // used by exec for the user stack guard page.
 void
diff --git a/user/conv.h b/user/conv.h
new file mode 100644
index 0000000..119daf0
--- /dev/null
+++ b/user/conv.h
@@ -0,0 +1,37 @@
+#include "user.h"
+#include "user/mutex_user.h"
+
+struct thread_cond {
+    int signal;
+};
+
+void
+thread_cond_init(struct thread_cond *cv)
+{
+  cv->signal = 0;
+}
+
+void
+thread_cond_wait(struct thread_cond *cv, struct thread_mutex *m)
+{
+  __sync_and_and_fetch(&cv->signal, 0);
+
+    thread_mutex_unlock(m);
+
+    // for 1st iteration, when signal is 0, it will go to sleep
+    // otherwise, it don't need as someone else already called signal and it will be 1 (optimization)
+    while(__sync_bool_compare_and_swap(&cv->signal, 0, 0)) { // while loop for protecting from spurios wakeups
+        // sleep
+        conv_wait(cv);
+    }
+
+    thread_mutex_lock(m);
+}
+
+void thread_cond_broadcast(struct thread_cond *cv)
+{
+    __sync_synchronize();
+    __sync_lock_test_and_set(&cv->signal, 1);
+    // wake up all threads
+    conv_broadcast(cv);
+}
\ No newline at end of file
diff --git a/user/mutex_user.h b/user/mutex_user.h
new file mode 100644
index 0000000..014c9ee
--- /dev/null
+++ b/user/mutex_user.h
@@ -0,0 +1,32 @@
+// #include "user.h"
+// Mutual exclusion lock.
+#pragma once
+
+struct thread_mutex {
+  unsigned int locked;       // Is the lock held?
+};
+
+void
+thread_mutex_init(struct thread_mutex *lk)
+{
+  lk->locked = 0;
+}
+
+void
+thread_mutex_lock(struct thread_mutex *lk)
+{
+  
+  while(__sync_lock_test_and_set(&lk->locked, 1)) {
+    sleep(1);
+  }
+
+  __sync_synchronize();
+}
+
+// Release the lock.
+void
+thread_mutex_unlock(struct thread_mutex *lk)
+{
+  __sync_synchronize();
+  __sync_lock_release(&lk->locked);
+}
\ No newline at end of file
diff --git a/user/prodcon.c b/user/prodcon.c
new file mode 100644
index 0000000..d5d8aa8
--- /dev/null
+++ b/user/prodcon.c
@@ -0,0 +1,126 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/semaphore.h"
+#include "user/user.h"
+
+struct queue {
+  int arr[16];
+  int front;
+  int rear;
+  int size;
+};
+
+void queue_init(struct queue *q) {
+  q->front = 0;
+  q->rear = 0;
+  q->size = 0;
+}
+void push(struct queue *q, int x) {
+  q->arr[q->rear] = x;
+  q->rear = (q->rear + 1) % 16;
+  q->size++;
+}
+int front(struct queue *q) {
+  if (q->size == 0)
+    return -1;
+  return q->arr[q->front];
+}
+void pop(struct queue *q) {
+  q->front = (q->front + 1) % 16;
+  q->size--;
+}
+
+struct queue q;
+// a mutex object lock
+struct thread_mutex lock;
+// a semaphore object empty
+struct thread_sem empty;
+// a semaphore object full
+struct thread_sem full;
+// to lock console
+struct thread_mutex plock;
+
+void init_semaphore() {
+  // initialize mutex lock
+  thread_mutex_init(&lock);
+  thread_mutex_init(&plock);
+  // initialize semaphore empty with 5
+  thread_sem_init(&empty, 5);
+  // initialize semaphore full with 0
+  thread_sem_init(&full, 0);
+}
+
+void ProducerFunc(void *arg) {
+  thread_mutex_lock(&plock);
+  printf("%s\n", (char *)arg);
+  thread_mutex_unlock(&plock);
+  int i;
+  for (i = 1; i <= 10; i++) {
+    // wait for semphore empty
+    thread_sem_wait(&empty);
+    // wait for mutex lock
+    thread_mutex_lock(&lock);
+
+    sleep(1);
+    push(&q, i);
+    thread_mutex_lock(&plock);
+    printf("producer produced item %d\n", i);
+    thread_mutex_unlock(&plock);
+
+    // unlock mutex lock
+    thread_mutex_unlock(&lock);
+    // post semaphore full
+    thread_sem_post(&full);
+  }
+  thread_exit();
+}
+
+void ConsumerFunc(void *arg) {
+  thread_mutex_lock(&plock);
+  printf("%s\n", (char *)arg);
+  thread_mutex_unlock(&plock);
+  int i;
+  for (i = 1; i <= 10; i++) {
+    // wait for semphore full
+    thread_sem_wait(&full);
+    // wait for mutex lock
+    thread_mutex_lock(&lock);
+
+    sleep(1);
+    int item = front(&q);
+    pop(&q);
+
+    thread_mutex_lock(&plock);
+    printf("consumer consumed item %d\n", item);
+    thread_mutex_unlock(&plock);
+
+    // unlock mutex lock
+    thread_mutex_unlock(&lock);
+    // post semaphore empty
+    thread_sem_post(&empty);
+  }
+  thread_exit();
+}
+
+int main(void) {
+
+  queue_init(&q);
+  init_semaphore();
+
+  char *message1 = "i am producer";
+  char *message2 = "i am consumer";
+
+  void *s1, *s2;
+  int thread1, thread2;
+
+  s1 = malloc(4096);
+  s2 = malloc(4096);
+
+  thread1 = thread_create(ProducerFunc, (void *)message1, s1);
+  thread2 = thread_create(ConsumerFunc, (void *)message2, s2);
+
+  thread_join(thread1);
+  thread_join(thread2);
+
+  exit(0);
+}
diff --git a/user/queue.h b/user/queue.h
new file mode 100644
index 0000000..e69de29
diff --git a/user/semaphore.h b/user/semaphore.h
new file mode 100644
index 0000000..5583d70
--- /dev/null
+++ b/user/semaphore.h
@@ -0,0 +1,36 @@
+#include "user/conv.h"
+
+struct thread_sem {
+    int count; 
+    struct thread_mutex m;
+    struct thread_cond cv;
+};
+
+int thread_sem_init(struct thread_sem *s, int value) {
+
+    s->count = value;
+    thread_mutex_init(&s->m);
+    thread_cond_init(&s->cv);
+    return 0;
+}
+
+
+void thread_sem_wait(struct thread_sem *s) {
+    thread_mutex_lock(&s->m);
+    while (s->count == 0) {
+        thread_cond_wait(&s->cv, &s->m); /*unlock mutex, wait, relock mutex */
+    }
+    s->count--;
+    thread_mutex_unlock(&s->m);
+}
+
+
+void thread_sem_post(struct thread_sem *s) {
+    thread_mutex_lock(&s->m);
+    s->count++;
+    if(s->count > 0) {
+        thread_cond_broadcast(&s->cv); /* See note */
+    /* A woken thread must acquire the lock, so it will also have to wait until we call unlock */
+    }
+    thread_mutex_unlock(&s->m);
+}
\ No newline at end of file
diff --git a/user/spinlock_user.h b/user/spinlock_user.h
new file mode 100644
index 0000000..305000a
--- /dev/null
+++ b/user/spinlock_user.h
@@ -0,0 +1,51 @@
+// Mutual exclusion lock.
+struct thread_spinlock {
+  unsigned int locked;       // Is the lock held?
+};
+
+void
+thread_spin_init(struct thread_spinlock *lk)
+{
+  lk->locked = 0;
+}
+
+void
+thread_spin_lock(struct thread_spinlock *lk)
+{
+  
+  // On RISC-V, sync_lock_test_and_set turns into an atomic swap:
+  //   a5 = 1
+  //   s1 = &lk->locked
+  //   amoswap.w.aq a5, a5, (s1)
+  while(__sync_lock_test_and_set(&lk->locked, 1) != 0);
+
+  // Tell the C compiler and the processor to not move loads or stores
+  // past this point, to ensure that the critical section's memory
+  // references happen strictly after the lock is acquired.
+  // On RISC-V, this emits a fence instruction.
+  __sync_synchronize();
+
+}
+
+// Release the lock.
+void
+thread_spin_unlock(struct thread_spinlock *lk)
+{
+  
+  // Tell the C compiler and the CPU to not move loads or stores
+  // past this point, to ensure that all the stores in the critical
+  // section are visible to other CPUs before the lock is released,
+  // and that loads in the critical section occur strictly before
+  // the lock is released.
+  // On RISC-V, this emits a fence instruction.
+  __sync_synchronize();
+
+  // Release the lock, equivalent to lk->locked = 0.
+  // This code doesn't use a C assignment, since the C standard
+  // implies that an assignment might be implemented with
+  // multiple store instructions.
+  // On RISC-V, sync_lock_release turns into an atomic swap:
+  //   s1 = &lk->locked
+  //   amoswap.w zero, zero, (s1)
+  __sync_lock_release(&lk->locked);
+}
\ No newline at end of file
diff --git a/user/thread-mem-test.c b/user/thread-mem-test.c
new file mode 100644
index 0000000..b443e35
--- /dev/null
+++ b/user/thread-mem-test.c
@@ -0,0 +1,160 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+struct balance {
+  char name[32];
+  int amount;
+};
+
+volatile int total_balance = 0;
+
+volatile unsigned int delay(unsigned int d) {
+  unsigned int i;
+  for (i = 0; i < d; i++) {
+    __asm volatile("nop" :::);
+  }
+
+  return i;
+}
+
+volatile int _tid = 0;
+int *x[2];
+volatile int locked = 0;
+int n = 10000;
+
+int *smem;
+
+void do_work(void *arg) {
+  int i;
+  int old;
+  int tid;
+  tid = _tid++;
+  // printf("&tid: %p\n", &tid);
+
+  while (locked) {
+  }
+  locked = 1;
+  printf("thread %d started\n", tid);
+  locked = 0;
+
+  struct balance *b = (struct balance *)arg;
+  // printf( "Starting do_work: s:%s\n", b->name);
+  x[tid] = malloc(sizeof(int) * n);
+
+  while (locked) {
+  }
+  locked = 1;
+  printf("thread %d malloced %p\n", tid, x[tid]);
+  locked = 0;
+
+  for (int i = 0; i < n; i++) {
+    x[tid][i] = i;
+  }
+
+  for (i = 0; i < b->amount; i++) {
+    // lock and mlock will be implemented by you.
+    // thread_spin_lock(&lock);
+    // thread_mutex_lock(&mlock);
+    old = total_balance;
+    delay(100000);
+    // if(old != total_balance)  printf("we will miss an update. old: %d
+    // total_balance: %d\n", old, total_balance);
+    total_balance = old + 1;
+    // thread_spin_unlock(&lock);
+    //  thread_mutex_lock(&mlock);
+  }
+
+  for (int i = 0; i < n; i++) {
+    while (locked) {
+    }
+    locked = 1;
+    smem[i]++;
+    locked = 0;
+  }
+
+  // printf( "Done s:%x\n", b->name);
+
+  fork();
+
+  thread_exit();
+  return;
+}
+
+void empty_task() {
+  int tid;
+  tid = _tid++;
+  // printf("&tid: %p\n", &tid);
+
+  while (locked) {
+  }
+  locked = 1;
+  printf("thread %i started\n", tid);
+  locked = 0;
+
+  // printf( "Starting do_work: s:%s\n", b->name);
+
+  for (int i = 0; i < n; i++) {
+    while (locked) {
+    }
+    locked = 1;
+    smem[i]++;
+    locked = 0;
+  }
+
+  int *x = (int*)malloc(sizeof(int)*n);
+  int i = 0;
+  while(1){
+    x[i]++;
+    i = (i + 1) % n;
+  }
+  // printf( "Done s:%x\n", b->name);
+
+  fork();
+
+  thread_exit();
+  return;
+}
+
+int main(int argc, char *argv[]) {
+
+  struct balance b1 = {"b1", 3200};
+  struct balance b2 = {"b2", 2800};
+
+  void *s1, *s2, *s3;
+  int thread1, thread2, r1, r2;
+
+  s1 = malloc(4096); // 4096 is the PGSIZE defined in kernel/riscv.h
+  s2 = malloc(4096);
+
+  smem = malloc(sizeof(int) * n);
+
+  thread1 = thread_create(do_work, (void *)&b1, s1);
+  thread2 = thread_create(do_work, (void *)&b2, s2);
+
+  
+    s3 = malloc(4096);
+    thread_create(empty_task, 0, s3);
+
+
+  r1 = thread_join(thread1);
+  r2 = thread_join(thread2);
+
+  printf("Threads finished: (%d):%d, (%d):%d, shared balance:%d\n", thread1, r1,
+         thread2, r2, total_balance);
+  printf("Thread 1 malloced: %p\n", x[0]);
+  printf("Thread 2 malloced: %p\n", x[1]);
+  for (int i = 0; i < n; i++) {
+    if (x[0][i] != i || x[1][i] != i) {
+      printf("Doesn't match\n");
+      printf("%d vs %d for %d\n", x[0][i], x[0][i], i);
+      return 0;
+    }
+    if (smem[i] != 3) {
+      printf("is't 3\n");
+      return 0;
+    }
+  }
+  printf("Match\n");
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/threads.c b/user/threads.c
new file mode 100644
index 0000000..eba65a3
--- /dev/null
+++ b/user/threads.c
@@ -0,0 +1,94 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "spinlock_user.h"
+#include "mutex_user.h"
+
+struct balance {
+  char name[32];
+  int amount;
+};
+
+struct thread_spinlock lock;
+struct thread_mutex mlock;
+struct thread_mutex print_mutex;
+
+volatile int total_balance = 0;
+
+volatile unsigned int delay(unsigned int d) {
+  unsigned int i;
+  for (i = 0; i < d; i++) {
+    __asm volatile("nop" :::);
+  }
+
+  return i;
+}
+
+void do_work(void *arg) {
+  int i;
+  int old;
+
+  struct balance *b = (struct balance *)arg;
+
+  thread_mutex_lock(&print_mutex);
+  printf("Starting do_work: s:%s\n", b->name);
+  thread_mutex_unlock(&print_mutex);
+
+  for (i = 0; i < b->amount; i++) {
+    // lock and mlock will be implemented by you.
+    // thread_spin_lock(&lock);
+    thread_mutex_lock(&mlock);
+    old = total_balance;
+    delay(100000);
+    if(old != total_balance)  printf("we will miss an update. old: %d total_balance: %d\n", old, total_balance);
+    total_balance = old + 1;
+    // thread_spin_unlock(&lock);
+     thread_mutex_unlock(&mlock);
+  }
+
+  printf("Done s:%x\n", b->name);
+
+  thread_exit();
+  return;
+}
+
+int main(int argc, char *argv[]) {
+
+  thread_spin_init(&lock);
+
+  thread_mutex_init(&mlock);
+  thread_mutex_init(&print_mutex);
+  
+
+  struct balance b1 = {"b1", 3200};
+  struct balance b2 = {"b2", 2800};
+
+  void *s1, *s2;
+
+  s1 = malloc(4096); // 4096 is the PGSIZE defined in kernel/riscv.h
+  s2 = malloc(4096);
+
+
+  // for extensive testing of different events
+    // thread_create(do_work, (void*)&b1, s1);
+    // thread_create(do_work, (void*)&b2, s2);
+
+    // thread_exit();
+    // exit(0);
+
+  int thread1, thread2, r1, r2;
+
+  thread1 = thread_create(do_work, (void *)&b1, s1);
+  thread2 = thread_create(do_work, (void *)&b2, s2);
+
+  r1 = thread_join(thread1);
+  r2 = thread_join(thread2);
+
+  printf("Threads finished: (%d):%d, (%d):%d, shared balance:%d\n", thread1, r1,
+         thread2, r2, total_balance);
+
+  exit(0);
+
+
+  return 0;
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..89965e6 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,11 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int thread_create(void(*fcn)(void*), void *arg, void*stack);
+int thread_join(int thread_id);
+void thread_exit(void);
+void conv_wait(void*);
+void conv_broadcast(void*);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..753ef32 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,8 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("thread_create");
+entry("thread_join");
+entry("thread_exit");
+entry("conv_wait");
+entry("conv_broadcast");
